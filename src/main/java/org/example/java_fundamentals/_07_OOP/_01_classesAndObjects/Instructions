1. Class: Car
Scenario:
Create a Car class to represent basic information about a car
and its actions.

Requirements:

Properties:

brand (String)

model (String)

year (int)

price (double)

Methods:

startEngine() → prints "<brand> engine started."

stopEngine() → prints "<brand> engine stopped."

accelerate() → prints "<brand> is accelerating."

brake() → prints "<brand> is braking."

displayCarInfo() → prints all details of the car

Sample Output:

Toyota engine started.
Toyota is accelerating.
Toyota is braking.
Toyota engine stopped.
Car Info:
Brand: Toyota
Model: Corolla
Year: 2022
Price: $25000.0
-----------------------------------

2. Class: Book
Scenario:
Create a Book class to represent a book in a library.

Requirements:

Properties:

title (String)

author (String)

price (double)

available (boolean)

Methods:

borrowBook() → sets available to false and prints "The book '<title>' has been borrowed."

returnBook() → sets available to true and prints "The book '<title>' has been returned."

displayBookInfo() → prints the book details

Sample Output:

The book 'Java Programming' has been borrowed.
The book 'Java Programming' has been returned.
Book Info:
Title: Java Programming
Author: John Doe
Price: $45.5
Available: true
--------------------------------------------
3. Class: Student
Scenario:
Create a Student class to store information about a student and their actions.

Requirements:

Properties:

name (String)

studentId (String)

gradeLevel (int)

gpa (double)

Methods:

study() → prints "<name> is studying."

attendClass() → prints "<name> is attending class."

takeExam() → prints "<name> is taking an exam."

displayStudentInfo() → prints all student details

Sample output:

Alice is studying.
Alice is attending class.
Alice is taking an exam.
Student Info:
Name: Alice
ID: ST123
Grade Level: 2
GPA: 3.5
------------------------------------------------
4. Class: BankAccount
Scenario:
Create a BankAccount class to manage a customer's account.

Requirements:

Properties:

accountHolderName (String)

accountNumber (String)

balance (double)

Methods:

deposit(double amount) → increases balance

withdraw(double amount) → decreases balance if sufficient funds are available

checkBalance() → prints the current balance

displayAccountInfo() → prints account details

Sample Output:

Deposited $500.0 successfully.
Withdrawal of $200.0 successful.
Current balance: $300.0
Account Info:
Name: John Smith
Account Number: AC12345
Balance: $300.0
-----------------------------------

5. Class: Employee
Scenario:
Create an Employee class to represent employee information.

Requirements:

Properties:

name (String)

employeeId (String)

department (String)

salary (double)

Methods:

work() → prints "<name> is working in <department>."

takeBreak() → prints "<name> is taking a break."

increaseSalary(double amount) → increases the salary

displayEmployeeInfo() → prints all employee details

Sample Output:

Alice is working in HR.
Alice is taking a break.
Salary increased by $1000.0
Employee Info:
Name: Alice
Employee ID: EMP001
Department: HR
Salary: $51000.0
-----------------------------------------
6. Class: Movie
Scenario:
Create a Movie class to represent movies in a streaming service.

Requirements:

Properties:

title (String)

genre (String)

duration (int) // in minutes

rating (double)

Methods:

playMovie() → prints "Playing movie: <title>"

pauseMovie() → prints "Movie <title> is paused."

stopMovie() → prints "Movie <title> stopped."

displayMovieInfo() → prints all movie details

Sample Output:
Playing movie: Inception
Movie Inception is paused.
Movie Inception stopped.
Movie Info:
Title: Inception
Genre: Sci-Fi
Duration: 148 minutes
Rating: 8.8
-------------------------------------
7. Class: GymMember
Scenario:
Create a GymMember class to manage gym member information.

Requirements:

Properties:

memberName (String)

membershipId (String)

membershipType (String) // e.g., Monthly, Annual

weight (double)

Methods:

workout() → prints "<memberName> is working out."

checkIn() → prints "<memberName> has checked in."

updateWeight(double newWeight) → updates the member's weight

displayMemberInfo() → prints all member details

Sample Output:

John has checked in.
John is working out.
Weight updated successfully.
Member Info:
Name: John
Membership ID: GYM123
Type: Annual
Weight: 75.5 kg
----------------------------------
8. Class: RestaurantOrder
Scenario:
Create a RestaurantOrder class to manage customer orders.

Requirements:

Properties:

orderId (String)

customerName (String)

foodItem (String)

price (double)

Methods:

placeOrder() → prints "Order <orderId> placed for <customerName>."

cancelOrder() → prints "Order <orderId> has been canceled."

displayOrderInfo() → prints all order details

Sample Output:

Order O123 placed for Alice.
Order O123 has been canceled.
Order Info:
ID: O123
Customer: Alice
Food Item: Burger
Price: $8.5