1. Student Management System
Scenario:
A school needs a system to manage student records.

The admin must log in before managing students.

Each student has:

studentId

name

grade

The system should allow the admin to:

Register a student.

View all students.

Search for a student by ID.

Prevent duplicate students using .equals() and hashCode().

Exit.

The program must use a switch statement to navigate through the menu options.

Instructions for Students:
Create a Student class with:

Private fields: studentId, name, grade.

A constructor to initialize the student.

Override .equals() and .hashCode() to consider two students equal if they have the same studentId.

Create a login system with a fixed username and password (admin / 1234).

Use an ArrayList<Student> to store all registered students.

Build a menu-driven program using a switch statement.


===== School Admin Login =====
Enter username: admin
Enter password: 1234
Login successful!

=== Student Management Menu ===
1. Register Student
2. View Students
3. Search Student by ID
4. Exit
Choose an option: 1
Enter Student ID: S001
Enter Name: Alice
Enter Grade: 10th
Student registered successfully!

Choose an option: 1
Enter Student ID: S001
Enter Name: Alice
Enter Grade: 10th
Duplicate student! Registration not allowed.

Choose an option: 2
--- Student List ---
ID: S001, Name: Alice, Grade: 10th

Choose an option: 3
Enter Student ID to search: S001
Student found: ID: S001, Name: Alice, Grade: 10th

Choose an option: 4
Exiting system... Goodbye!
--------------------------------------------------
2.Online Store Management System
  Scenario:
  An online store wants to manage its product inventory.

  The store manager must log in first.

  Each product has:

  productId

  name

  price

  The system should allow the manager to:

  Add a product.

  View all products.

  Search for a product by name.

  Prevent duplicate products based on productId.

  Exit.

  Instructions for Students:
  Create a Product class with private fields and a constructor.

  Override .equals() and .hashCode() so that two products are considered equal if they have the same productId.

  Use an ArrayList<Product> to store products.

  Implement a menu using a switch statement to navigate the options.

  ===== Online Store Login =====
  Enter username: manager
  Enter password: store123
  Login successful!

  === Online Store Menu ===
  1. Add Product
  2. View Products
  3. Search Product by Name
  4. Exit
  Choose an option: 1
  Enter Product ID: P001
  Enter Product Name: Laptop
  Enter Price: 800
  Product added successfully!

  Choose an option: 1
  Enter Product ID: P001
  Enter Product Name: Laptop
  Enter Price: 800
  Duplicate product! Cannot add.

  Choose an option: 2
  --- Product List ---
  ID: P001, Name: Laptop, Price: $800.0

  Choose an option: 3
  Enter product name to search: Laptop
  Product found: ID: P001, Name: Laptop, Price: $800.0

  Choose an option: 4
  Exiting system... Goodbye!
  ------------------------------------------
3. Gym Membership Tracker with Login
   Scenario:
   A gym owner wants to register members and track their details.

   The gym owner must log in before accessing the system.

   Each member has:

   memberId

   name

   membershipType (Monthly or Annual)

   The system should:

   Register a member.

   View all members.

   Search member by ID.

   Prevent duplicate registrations based on memberId.

   Exit.

   ===== Gym Owner Login =====
   Enter username: owner
   Enter password: gym123
   Login successful!

   === Gym Menu ===
   1. Register Member
   2. View Members
   3. Search Member by ID
   4. Exit
   Choose an option: 1
   Enter Member ID: M001
   Enter Name: Alice
   Enter Membership Type (Monthly/Annual): Annual
   Member registered successfully!

   Choose an option: 1
   Enter Member ID: M001
   Enter Name: Alice
   Enter Membership Type (Monthly/Annual): Annual
   Duplicate member! Cannot register.

   Choose an option: 2
   --- Member List ---
   ID: M001, Name: Alice, Membership Type: Annual

   Choose an option: 3
   Enter Member ID to search: M001
   Member found: ID: M001, Name: Alice, Membership Type: Annual

   Choose an option: 4
   Exiting Gym System... Goodbye!
 --------------------------------------------------
 4.Library Management System
   Scenario:
   A library wants to keep track of books being added to its collection.

   The librarian must log in to access the system.

   Each book has:

   bookId

   title

   author

   The system must allow:

   Add a new book.

   View all books.

   Search for a book by title.

   Prevent adding duplicate books (same bookId).

   Exit.

   Instructions for Students:
   Create a Book class with private fields and a constructor.

   Override .equals() and .hashCode() to prevent duplicates based on bookId.

   Use an ArrayList<Book> to store books.

   Build a menu using a switch statement with options for adding, viewing, and searching books.

   ==== Librarian Login ======
   Enter username: librarian
   Enter password: lib123
   Login successful!

   === Library Menu ===
   1. Add Book
   2. View Books
   3. Search Book by Title
   4. Exit
   Choose an option: 1
   Enter Book ID: B001
   Enter Title: Java Basics
   Enter Author: John Smith
   Book added successfully!

   Choose an option: 1
   Enter Book ID: B001
   Enter Title: Java Basics
   Enter Author: John Smith
   Duplicate book! Cannot add.

   Choose an option: 2
   --- Library Books ---
   ID: B001, Title: Java Basics, Author: John Smith

   Choose an option: 3
   Enter title to search: Java Basics
   Book found: ID: B001, Title: Java Basics, Author: John Smith

   Choose an option: 4
   Exiting system... Goodbye!
----------------------------------------------
5. Project Scenario: Student Management System
    Project Overview
    The School Administration Department wants to develop a simple console-based Student Management System using Java.
    This system should allow the school administrator to log in, register students, view student details, and search
    for students — all while following Object-Oriented Programming (OOP) principles such as Encapsulation,
     Constructors, and Object Equality.

    The project should be built using multiple classes that demonstrate clean OOP design and modular coding practices

    Learning Objectives
        By completing this project, students will:

        Understand and apply Encapsulation (private fields, getters, setters).

        Use Constructors to initialize object data.

        Implement login validation using a separate class.

        Manage data dynamically using ArrayList.

        Use a Switch statement for console-based menu navigation.

        Apply Object Equality (equals and hashCode) to prevent duplicates.

        Use search functionality to find specific records.

        Follow class separation and modular design for clarity and reusability.



    Scenario
    The Bright Future Academy has recently digitalized its operations.
    The school principal has asked you, as a junior Java developer, to build a simple console program that allows
    the administrator to:

    Log in to the system securely.

    Register new students (with ID, name, and age).

    Prevent duplicate student entries (based on ID).

    View all registered students.

    Search for a specific student by ID.

    Exit the system safely.


    The admin credentials are:



    Username: admin
    Password: 1234



    Detailed Instructions
    Step 1: Create the Student Class (Domain Class)
        Define private fields: studentId, name, and age.

        Use getters and setters for controlled access.

        Add validation inside setAge() (age must be greater than 0).

        Create a constructor that initializes all fields.

        Add a displayInfo() method to print student details.

        Override equals() and hashCode() to compare students by their studentId — this prevents duplicates.

    Step 2: Create the Validation Class
        Create a static login() method that:

        Asks for username and password using Scanner.

        Returns true if login is successful, false otherwise.

        Create helper methods:

        isValidName(String name) → Ensures name is not empty.

        isValidId(String id) → Ensures ID contains letters or numbers only.

        isValidAge(int age) → Ensures age is within a reasonable range (1–120).

    Step 3: Create the Menu Class
        This class handles the main operations after login.


        Maintain an ArrayList of Student objects.

        Display a menu with the following options:

        === Student Management Menu ===
        1. Register Student
        2. View All Students
        3. Search Student by ID
        4. Exit



        Use a switch statement to control user actions.

        For registration:

        Ask for studentId, name, and age.

        Validate the input using the Validation class.

        Create a Student object using a constructor.

        Prevent duplicates using .contains() (which uses equals() internally).

        For viewing:

        Print all student records in tabular form.

        For searching:

        Ask for a student ID and display details if found.

    Step 4: Create the Main Class

        Call the Validation.login() method first.

        If login succeeds:

        Create a Menu object and call displayMenu().

        If login fails:

        Display an error and exit the program.

    ===== School Admin Login =====
    Enter username: admin
    Enter password: 1234
    Login successful!

    === Student Management Menu ===
    1. Register Student
    2. View All Students
    3. Search Student by ID
    4. Exit
    Choose an option: 1
    Enter Student ID: S001
    Enter Name: Alice
    Enter Age: 20
    Student registered successfully!

    Choose an option: 1
    Enter Student ID: S001
    Enter Name: Alice
    Enter Age: 20
    Duplicate student detected! Registration not allowed.

    Choose an option: 2
    --- Student List ---
    ID: S001 | Name: Alice | Age: 20

    Choose an option: 3
    Enter Student ID to search: S001
    Student found:
    ID: S001 | Name: Alice | Age: 20

    Choose an option: 4
    Exiting system... Goodbye!
